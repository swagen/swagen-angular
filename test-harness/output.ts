//------------------------------
// <auto-generated>
//     Generated using the Swagen tool
//     Generator: angular
//     Mode: ng-typescript
// </auto-generated>
//------------------------------
// Tavant.Rpos.Api
// Tavant RPOS UI Services API
// Base URL: http://rpos-dev.azurewebsites.net/

import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs/Rx';

import { environment } from '../../../environments/environment';

@Injectable()
export class AssetsLiabilitiesClient implements IAssetsLiabilitiesClient {
    private readonly _baseUrl: string;

    constructor(private readonly _http: HttpClient) {
        this._baseUrl = environment.baseUrl || 'http://rpos-dev.azurewebsites.net/';
    }

    public assetsLiabilitiesGetAssetsLiabilities(applicationId: string, borrowerId: string, coBorrowerId: string): Observable<AssetsLiabilities> {
        const resourceUrl: string = '/api/assets-liabilities';
        const queryParams: {[key: string]: string} = {
            applicationId: encodeURIComponent('' + applicationId),
            borrowerId: encodeURIComponent('' + borrowerId),
            coBorrowerId: encodeURIComponent('' + coBorrowerId)
        };

        const url = buildServiceUrl(this._baseUrl, resourceUrl, queryParams);

        const content = '';

        const options = {
            body: content,
            headers: new Headers({
                'Accept': 'application/json'
            }),
            method: 'GET'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processAssetsLiabilitiesGetAssetsLiabilities(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processAssetsLiabilitiesGetAssetsLiabilities(response);
                } catch (e) {
                    return <Observable<AssetsLiabilities>><any>Observable.throw(response);
                }
            }
        });
    }

    private processAssetsLiabilitiesGetAssetsLiabilities(response: Response): Observable<AssetsLiabilities> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: AssetsLiabilities = !responseText ? null : <AssetsLiabilities>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            case 500:
                return throwException(status, responseText);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }

    public assetsLiabilitiesSaveAssetsLiabilities(assetsLiabilities: AssetsLiabilities): Observable<AssetsLiabilities> {
        if (assetsLiabilities == undefined || assetsLiabilities == null) {
            throw new Error(`The parameter 'assetsLiabilities' must be defined.`);
        }

        const resourceUrl: string = '/api/assets-liabilities';
        const url = buildServiceUrl(this._baseUrl, resourceUrl);

        const content = JSON.stringify(assetsLiabilities);

        const options = {
            body: content,
            headers: new Headers({
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }),
            method: 'PUT'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processAssetsLiabilitiesSaveAssetsLiabilities(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processAssetsLiabilitiesSaveAssetsLiabilities(response);
                } catch (e) {
                    return <Observable<AssetsLiabilities>><any>Observable.throw(response);
                }
            }
        });
    }

    private processAssetsLiabilitiesSaveAssetsLiabilities(response: Response): Observable<AssetsLiabilities> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: AssetsLiabilities = !responseText ? null : <AssetsLiabilities>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            case 500:
                return throwException(status, responseText);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }
}

@Injectable()
export class DataClient implements IDataClient {
    private readonly _baseUrl: string;

    constructor(private readonly _http: HttpClient) {
        this._baseUrl = environment.baseUrl || 'http://rpos-dev.azurewebsites.net/';
    }

    /**
     * Retrieves all branches for the organization.
     */
    public branchSearchBranches(startRecord: number, recordCount: number): Observable<BranchSearchResult> {
        const resourceUrl: string = '/data/branches';
        const queryParams: {[key: string]: string} = {
            startRecord: encodeURIComponent('' + startRecord),
            recordCount: encodeURIComponent('' + recordCount)
        };

        const url = buildServiceUrl(this._baseUrl, resourceUrl, queryParams);

        const content = '';

        const options = {
            body: content,
            headers: new Headers({
                'Accept': 'application/json'
            }),
            method: 'GET'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processBranchSearchBranches(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processBranchSearchBranches(response);
                } catch (e) {
                    return <Observable<BranchSearchResult>><any>Observable.throw(response);
                }
            }
        });
    }

    private processBranchSearchBranches(response: Response): Observable<BranchSearchResult> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: BranchSearchResult = !responseText ? null : <BranchSearchResult>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            case 500:
                return throwException(status, responseText);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }

    public branchUpsertBranches(branches: Branch[]): Observable<Branch> {
        if (branches == undefined || branches == null) {
            throw new Error(`The parameter 'branches' must be defined.`);
        }

        const resourceUrl: string = '/data/branches';
        const url = buildServiceUrl(this._baseUrl, resourceUrl);

        const content = JSON.stringify(branches);

        const options = {
            body: content,
            headers: new Headers({
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }),
            method: 'POST'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processBranchUpsertBranches(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processBranchUpsertBranches(response);
                } catch (e) {
                    return <Observable<Branch>><any>Observable.throw(response);
                }
            }
        });
    }

    private processBranchUpsertBranches(response: Response): Observable<Branch> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: Branch = !responseText ? null : <Branch>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            case 400:
                return throwException(status, responseText);
            case 500:
                return throwException(status, responseText);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }

    public branchGetBranch(id: string): Observable<Branch> {
        if (id == undefined || id == null) {
            throw new Error(`The parameter 'id' must be defined.`);
        }

        const resourceUrl: string = '/data/branches/{id}'
            .replace('{id}', encodeURIComponent('' + id));
        const url = buildServiceUrl(this._baseUrl, resourceUrl);

        const content = '';

        const options = {
            body: content,
            headers: new Headers({
                'Accept': 'application/json'
            }),
            method: 'GET'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processBranchGetBranch(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processBranchGetBranch(response);
                } catch (e) {
                    return <Observable<Branch>><any>Observable.throw(response);
                }
            }
        });
    }

    private processBranchGetBranch(response: Response): Observable<Branch> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: Branch = !responseText ? null : <Branch>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            case 404:
                return throwException(status, responseText);
            case 500:
                return throwException(status, responseText);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }

    public branchDeleteBranch(id: string): Observable<any> {
        if (id == undefined || id == null) {
            throw new Error(`The parameter 'id' must be defined.`);
        }

        const resourceUrl: string = '/data/branches/{id}'
            .replace('{id}', encodeURIComponent('' + id));
        const url = buildServiceUrl(this._baseUrl, resourceUrl);

        const content = '';

        const options = {
            body: content,
            headers: new Headers({
                'Accept': 'application/json'
            }),
            method: 'DELETE'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processBranchDeleteBranch(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processBranchDeleteBranch(response);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(response);
                }
            }
        });
    }

    private processBranchDeleteBranch(response: Response): Observable<any> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: any = !responseText ? null : <any>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            case 204:
                const result: any = !responseText ? null : <any>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            case 500:
                return throwException(status, responseText);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }
}

@Injectable()
export class RateSheetClient implements IRateSheetClient {
    private readonly _baseUrl: string;

    constructor(private readonly _http: HttpClient) {
        this._baseUrl = environment.baseUrl || 'http://rpos-dev.azurewebsites.net/';
    }

    public rateSheetSearchRateSheets(startRecord: number, recordCount: number): Observable<RateSheetSearchResults> {
        const resourceUrl: string = '/api/rate-sheets';
        const queryParams: {[key: string]: string} = {
            startRecord: encodeURIComponent('' + startRecord),
            recordCount: encodeURIComponent('' + recordCount)
        };

        const url = buildServiceUrl(this._baseUrl, resourceUrl, queryParams);

        const content = '';

        const options = {
            body: content,
            headers: new Headers({
                'Accept': 'application/json'
            }),
            method: 'GET'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processRateSheetSearchRateSheets(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processRateSheetSearchRateSheets(response);
                } catch (e) {
                    return <Observable<RateSheetSearchResults>><any>Observable.throw(response);
                }
            }
        });
    }

    private processRateSheetSearchRateSheets(response: Response): Observable<RateSheetSearchResults> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: RateSheetSearchResults = !responseText ? null : <RateSheetSearchResults>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            case 500:
                return throwException(status, responseText);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }
}

@Injectable()
export class UiRateSheetClient implements IUiRateSheetClient {
    private readonly _baseUrl: string;

    constructor(private readonly _http: HttpClient) {
        this._baseUrl = environment.baseUrl || 'http://rpos-dev.azurewebsites.net/';
    }

    public uiRateSheetGetDailyRateSheet(): Observable<DailyRateSheet> {
        const resourceUrl: string = '/ui/rate-sheets/daily';
        const url = buildServiceUrl(this._baseUrl, resourceUrl);

        const content = '';

        const options = {
            body: content,
            headers: new Headers({
                'Accept': 'application/json'
            }),
            method: 'GET'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processUiRateSheetGetDailyRateSheet(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processUiRateSheetGetDailyRateSheet(response);
                } catch (e) {
                    return <Observable<DailyRateSheet>><any>Observable.throw(response);
                }
            }
        });
    }

    private processUiRateSheetGetDailyRateSheet(response: Response): Observable<DailyRateSheet> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: DailyRateSheet = !responseText ? null : <DailyRateSheet>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }

    public uiRateSheetGetArchiveRateSheets(): Observable<any> {
        const resourceUrl: string = '/ui/rate-sheets/archive';
        const url = buildServiceUrl(this._baseUrl, resourceUrl);

        const content = '';

        const options = {
            body: content,
            headers: new Headers({
                'Accept': 'application/json'
            }),
            method: 'GET'
        };

        return this.http.request(url, options).flatMap(response =>
            this.processUiRateSheetGetArchiveRateSheets(response)
        ).catch(response => {
            if (response instanceof Response) {
                try {
                    return this.processUiRateSheetGetArchiveRateSheets(response);
                } catch (e) {
                    return <Observable<any>><any>Observable.throw(response);
                }
            }
        });
    }

    private processUiRateSheetGetArchiveRateSheets(response: Response): Observable<any> {
        const status = +response.status;
        const responseText = response.text();
        switch (status) {
            case 200:
                const result: any = !responseText ? null : <any>JSON.parse(responseText, this.jsonParseReviver);
                return Observable.of(result);
            default:
                throw new Error(`Unexpected status code ${status}`);
        }
    }
}

function buildServiceUrl(baseUrl: string, resourceUrl: string, queryParams?: {[key: string]: string}): string {
    let url: string = baseUrl;
    const baseUrlSlash: boolean = url[url.length - 1] === '/';
    const resourceUrlSlash: boolean = resourceUrl[0] === '/';
    if (!baseUrlSlash && !resourceUrlSlash) {
        url += '/';
    } else if (baseUrlSlash && resourceUrlSlash) {
        url = url.substr(0, url.length - 1);
    }
    url += resourceUrl;

    if (queryParams) {
        let isFirst: boolean = true;
        for (const p in queryParams) {
            if (queryParams.hasOwnProperty(p) && queryParams[p]) {
                const separator: string = isFirst ? '?' : '&';
                url += `${separator}${p}=${queryParams[p]}`;
                isFirst = false;
            }
        }
    }
    return url;
}

export class SwaggerException extends Error {
    constructor(public readonly status: number, public readonly response: string, public readonly result: string) {
        super();
    }
}

function throwException(status: number, response: string, result?: string): Observable<any> {
    return !!result ? Observable.throw(result) : Observable.throw(new SwaggerException(status, response, null));
}

export interface Address {
    lines?: string[] | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zip?: string | undefined;
    id?: string | undefined;
}

export interface Asset {
    assetType?: AssetTypeAsset | undefined;
    borrowerId?: string | undefined;
    companyName?: string | undefined;
    addressLines?: string[] | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    remarks?: string | undefined;
    checkingSavings?: CheckingSavings[] | undefined;
    stocksAndBonds?: StocksAndBonds[] | undefined;
    autoOwned?: AutoOwned[] | undefined;
    lifeInsurance?: LifeInsurance | undefined;
    others?: Other[] | undefined;
    retirementFundsBalance?: number | undefined;
    netWorthBusinessBalance?: number | undefined;
    totalBalance?: number | undefined;
    recordStatus?: RecordStatusAsset | undefined;
    id?: string | undefined;
}

export interface AssetHeader {
    appDepositDesc?: string | undefined;
    appDepositAmt?: number | undefined;
    earnestDesc?: string | undefined;
    earnestAmt?: number | undefined;
    cashTowardsPurchaseIncludeInNetWorth?: boolean | undefined;
    id?: string | undefined;
}

export interface AssetsLiabilities {
    applicationId?: string | undefined;
    statementCompleted?: StatementCompletedAssetsLiabilities | undefined;
    vacancyFactor?: number | undefined;
    subjectPropertyAddress?: Address | undefined;
    borrowerAddress?: BorrowerAddress | undefined;
    coBorrowerAddress?: BorrowerAddress | undefined;
    assetHeader?: AssetHeader | undefined;
    assets?: Asset[] | undefined;
    liabilities?: Liability[] | undefined;
    realEstateOwnedList?: RealEstateOwned[] | undefined;
    id?: string | undefined;
}

export interface AssetsLiabilitiesRequest {
    applicationId?: string | undefined;
    borrowerId?: string | undefined;
    coBorrowerId?: string | undefined;
}

export interface AutoOwned {
    autosOwned?: string | undefined;
    balanceOrMarketValue?: number | undefined;
    id?: string | undefined;
}

export interface BorrowerAddress {
    borrowerId?: string | undefined;
    address?: Address | undefined;
    id?: string | undefined;
}

export interface Branch {
    name?: string | undefined;
    id?: string | undefined;
}

export interface BranchFilterCriteria {
    field?: FieldBranchFilterCriteria | undefined;
    operation?: OperationBranchFilterCriteria | undefined;
    value?: any | undefined;
}

export interface BranchSearchCriteria {
    filters?: BranchFilterCriteria[] | undefined;
    sortSpecs?: BranchSortSpec[] | undefined;
    startRecord?: number | undefined;
    recordCount?: number | undefined;
}

export interface BranchSearchResult {
    data?: Branch[] | undefined;
    totalCount?: number | undefined;
}

export interface BranchSortSpec {
    field?: FieldBranchFilterCriteria | undefined;
    order?: OrderBranchSortSpec | undefined;
}

export interface CheckingSavings {
    accountType?: AccountTypeCheckingSavings | undefined;
    accountNumber?: string | undefined;
    balanceOrMarketValue?: number | undefined;
    recordStatus?: RecordStatusAsset | undefined;
    id?: string | undefined;
}

export interface DailyRateSheet {
    branches?: BranchSearchResult | undefined;
    rateSheets?: RateSheetSearchResults | undefined;
}

export interface Error {
    errorCode?: string | undefined;
    correlationId?: string | undefined;
    debug?: string | undefined;
}

export interface Liability {
    liabilityType?: LiabilityTypeLiability | undefined;
    borrowerId?: string | undefined;
    accountType?: AccountTypeLiability | undefined;
    companyName?: string | undefined;
    addressLines?: string[] | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    accountNumber?: string | undefined;
    unpaidBalance?: number | undefined;
    notCounted?: boolean | undefined;
    toBePaidOff?: boolean | undefined;
    omitted?: boolean | undefined;
    listedOnCreditReport?: boolean | undefined;
    resubordinated?: boolean | undefined;
    defaultPaymentLeft?: number | undefined;
    overrideDefault?: boolean | undefined;
    overridePaymentLeft?: string | undefined;
    monthlyPayment?: number | undefined;
    atrNotes?: string | undefined;
    otherNotes?: string | undefined;
    isLinkedToReo?: boolean | undefined;
    reoId?: string | undefined;
    lienPosition?: number | undefined;
    mortgagePayments?: number | undefined;
    otherExpenceType?: OtherExpenceTypeLiability | undefined;
    otherExpenseOwedTo?: string | undefined;
    otherExpenseAmount?: number | undefined;
    otherExpenseQmatrNotes?: string | undefined;
    jobExpenseDesc1?: string | undefined;
    jobExpenseAmount1?: number | undefined;
    jobExpenseDesc2?: string | undefined;
    jobExpenseAmount2?: number | undefined;
    jobExpense1QmatrNotes?: string | undefined;
    jobExpense2QmatrNotes?: string | undefined;
    recordStatus?: RecordStatusAsset | undefined;
    id?: string | undefined;
}

export interface LifeInsurance {
    faceAmountName?: number | undefined;
    balanceOrMarketValue?: number | undefined;
    id?: string | undefined;
}

export interface Other {
    assetName?: string | undefined;
    balanceOrMarketValue?: number | undefined;
    id?: string | undefined;
}

export interface RateSheet {
    name?: string | undefined;
    fileType?: string | undefined;
    branchId?: string | undefined;
    fromDate?: Date | undefined;
    toDate?: Date | undefined;
    id?: string | undefined;
}

export interface RateSheetFilterCriteria {
    field?: FieldRateSheetFilterCriteria | undefined;
    operation?: OperationBranchFilterCriteria | undefined;
    value?: any | undefined;
}

export interface RateSheetSearchCriteria {
    filters?: RateSheetFilterCriteria[] | undefined;
    sortSpecs?: RateSheetSortSpec[] | undefined;
    startRecord?: number | undefined;
    recordCount?: number | undefined;
}

export interface RateSheetSearchResults {
    data?: RateSheet[] | undefined;
    totalCount?: number | undefined;
}

export interface RateSheetSortSpec {
    field?: FieldRateSheetFilterCriteria | undefined;
    order?: OrderBranchSortSpec | undefined;
}

export interface RealEstateOwned {
    borrowerId?: string | undefined;
    isCurrentResidence?: boolean | undefined;
    isSubjectProperty?: boolean | undefined;
    propertyAddresses?: string[] | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipCode?: string | undefined;
    propertyStatus?: PropertyStatusRealEstateOwned | undefined;
    typeOfProperty?: TypeOfPropertyRealEstateOwned | undefined;
    presentMarketValue?: number | undefined;
    amountOfMortgages?: number | undefined;
    grossRentalIncome?: number | undefined;
    vacancyFactor?: number | undefined;
    overrideVacancyFactor?: boolean | undefined;
    overrideVacancyFactorValue?: number | undefined;
    incomeLessVacancy?: number | undefined;
    mortgagePayments?: number | undefined;
    includeTandI?: boolean | undefined;
    insMainTaxHoa?: number | undefined;
    netRentalIncome?: number | undefined;
    overrideDefaultNri?: boolean | undefined;
    overrideNriValue?: number | undefined;
    piti?: number | undefined;
    overrideDefaultPiti?: boolean | undefined;
    overridePitiValue?: number | undefined;
    linkedToLiability?: boolean | undefined;
    linkedLiabilities?: Liability[] | undefined;
    totalReoValue?: number | undefined;
    recordStatus?: RecordStatusAsset | undefined;
    id?: string | undefined;
}

export interface StocksAndBonds {
    bankName?: string | undefined;
    balanceOrMarketValue?: number | undefined;
    id?: string | undefined;
}

export type AccountTypeCheckingSavings = 'NotAssigned' | 'Savings' | 'Checkings' | 'CashDepositOnSaleContract' | 'GiftNotDeposited' | 'CertificateOfDeposit' | 'MoneyMarketFund' | 'MutualFunds' | 'Stocks' | 'Bonds' | 'SecuredBorrowedFundsNotDeposited' | 'BridgeLoanNotDeposited' | 'RetairementFunds' | 'NetWorthOfBusinessOwned' | 'TrustFunds' | 'OtherNonLiquidAsset' | 'OtherLiquidAsset' | 'NetProceedsFromSaleOfRealEstate' | 'NetEquity' | 'CashOnHand' | 'GiftOfEquity';

export type AccountTypeLiability = 'NotAssigned' | 'Revolving' | 'Installment' | 'Mortgage' | 'Heloc' | 'Liens' | 'LeasePayments' | 'Open' | 'Taxes' | 'Other';

export type AssetTypeAsset = 'NotAssigned' | 'CheckingAndSaving' | 'StocksAndBonds' | 'AutoOwned' | 'OtherAssets' | 'LifeInsurance' | 'RetirementFunds' | 'NetWorthBusiness';

export type FieldBranchFilterCriteria = 'Name';

export type FieldRateSheetFilterCriteria = 'Name' | 'FileType' | 'BranchId' | 'FromDate' | 'ToDate';

export type LiabilityTypeLiability = 'NotAssigned' | 'Banking' | 'Other';

export type OperationBranchFilterCriteria = 'Equals' | 'DoesNotEqual' | 'GreaterThan' | 'GreaterThanOrEqual' | 'LessThan' | 'LessThanOrEqual' | 'Like';

export type OrderBranchSortSpec = 'Ascending' | 'Descending';

export type OtherExpenceTypeLiability = 'NotAssigned' | 'Alimony' | 'ChildSupport' | 'SeperateMaintance' | 'OtherExpense';

export type PropertyStatusRealEstateOwned = 'NotAssigned' | 'Sold' | 'PendingSale' | 'Rental' | 'Retained';

export type RecordStatusAsset = 'NotAssigned' | 'New' | 'Update' | 'Delete';

export type StatementCompletedAssetsLiabilities = 'NotAssigned' | 'Jointly' | 'NotJointly';

export type TypeOfPropertyRealEstateOwned = 'NotAssigned' | 'SingleFamily' | 'Condominium' | 'TownHouse' | 'CoOperative' | 'TwoToFourUnitProperty' | 'MultiFamilyMoreThanFourUnits' | 'ManufacturedMobileHome' | 'CommercialNonResidential' | 'MixedUseResidential' | 'Farm' | 'HomeAndBusinessCombined' | 'Land';
